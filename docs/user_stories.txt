## User Stories: 
Outline of a user story: Who is the user.  What do they want to do with the tool.  What needs and desires do they want for the tool.  What is their 
skill level.

Ashley is a student enrolled in University. She wants one place to access the LD50 value of chlorobenzene. She needs the information to be easily 
accessible and reliable. Ashley needs to find the information very quickly, while having the information being easily accessible and reliable. Ashley
is familiar with machine learning and some of its important components, but is unfamiliar with the field of 
toxicology. She doesnâ€™t know how to ask the questions (i.e., prompt engineering) and feels like when she asks the questions on other LLMs, she feels 
like the model is not understanding her question correctly. 

Joe is a professor of toxicology. Joe wants to check the safety requirements for some experiments he will be running in his lab. He wants the mechanism 
for the adverse outcome pathway of a chemical that he has not used before. He wants to use chemicals that he has not used in his lab before  where the 
chemical information can be more difficult to find and may be inaccurate. Joe is an expert in toxicology but has little knowledge on how to interact 
with an LLM.  

Evan is a chef. Evan wants to double check the dose for a prescription that was perscribed to him by his doctor. He wants little technical information 
about the drug. He wants an interface that is easily accessible and easy to use. He has has no medical background or any knowledge on toxicology.

## Use Cases:
- Access toxicity information (e.g., lethal dose)
- Interpret medical figures
- Learn more about toxicology data
- Check the dose for a prescription
- Confirm safety requirements for a specific chemical
- Acessible for all skill levels

## Component Specifications:
Name: Document loaders
What it does: Load data from a source, LC loaders: csv, html, json, md, pdf
Inputs: A file type (i.e., CSV, HTML, JSON, Markdown, PDF) and a source specification (could be a file path, a URL, an API 
endpoint, or a database query, depending on where the data is stored).
Outputs: Document content (could be in the raw form or preprocessed), status information (information about the success or failure of 
the document loading process), logs (detailed logs of the loading process that can be used for debugging and optimization.
Components used: Text splitter and database
Side effects: memory consumption


Component Name: Text splitter
What it does: Transform large text data into smaller pieces that are more better suited to your application. These transformations of the text may include 
splitting, combining, and filtering, and otherwise manipulating the document.
Inputs: Document content (the actual text that needs to be split, combined, and filtered) and the splitting parameters (something that 
specifies how to split the text.
Outputs: The different chunks of the document.
Components used: Document loaders

Component Name: Data Storage/Embedding/Database
What it does: Saves the data in a structed format within the databases or filesystems. This component also involved transforming the text into embeddings.
Inputs: Data (i.e., the data that needs to be stored) and information on how the data should be stored or embedded.
Outputs: The stored data (now structured and stored) and  embeddings (high-dimensional vector representations of the input text).
Components used: Document loader, data retrival, and database.

Component Name: Data Retrival
What it does: Interface that returns documents given an unstructured query.
Inputs: A string query (the information need or the question for which the documents are being retrieved).
Outputs: A list of documents that are deemed relevant to the query (typically the list also has the document ID, title, and source).
Components used: Data storage, database, and answer generation.

Component Name: Answer Generation
What it does: Reads through the user input, retrieves the relevant information, and generates a response that is relevant and accurate. 
Inputs: Question/prompt from the user and the retrieved documents.
Outputs: The generated answer that is relevant to the question being asked, accurate according to the best of the models knowledge, and coherent.
Components used: Text splitter, data retrieval, model, database.

Component Name: Prompt Generation
What it does: Creates well-formulated prompts that can effectively communicate the task or the question to the LLM. It should use prompt engineering to learn 
from different user interactions to improve the effectiveness of the prompts over time.
Inputs: A description of the task needed from the LLM and the  user's previous queries.
Outputs: The generated prompt to be fed to the LLM.
Components used: Data retrieval and answer generation.

Component Name: Model 
What it does: The core element of the language models that is responsible for processing the natural language input, understanding the context, and generating 
an appropriate natural language.
Inputs: Prompts or queries.
Outputs: Generated text.
Components used: Data retrieval, answer generation, and prompt generation.

